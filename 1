#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_IDENTIFIER_LENGTH 50

// Token types
typedef enum {
    IDENTIFIER,
    CONSTANT,
    OPERATOR
} TokenType;

// Token structure
typedef struct {
    TokenType type;
    char value[MAX_IDENTIFIER_LENGTH];
} Token;

// Function prototypes
int isOperator(char c);
int isKeyword(char* str);
Token getNextToken(FILE* fp);
void skipWhiteSpaceAndComments(FILE* fp);

int main() {
    FILE *fp;
    char filename[100];
    printf("Enter the filename to be analyzed: ");
    scanf("%s", filename);

    // Open the file
    fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("Error opening file.\n");
        exit(1);
    }

    Token token;
    // Read tokens until the end of file
    while ((token = getNextToken(fp)).type != EOF) {
        // Print token information
        switch (token.type) {
            case IDENTIFIER:
                printf("Identifier: %s\n", token.value);
                break;
            case CONSTANT:
                printf("Constant: %s\n", token.value);
                break;
            case OPERATOR:
                printf("Operator: %s\n", token.value);
                break;
        }
    }

    // Close the file
    fclose(fp);

    return 0;
}

// Function to check if a character is an operator
int isOperator(char c) {
    char operators[] = "+-*/%=><!";
    for (int i = 0; i < strlen(operators); i++) {
        if (c == operators[i])
            return 1;
    }
    return 0;
}

// Function to check if a string is a keyword
int isKeyword(char* str) {
    char keywords[][10] = {"if", "else", "while", "for", "int", "float", "char", "return"};
    for (int i = 0; i < sizeof(keywords) / sizeof(keywords[0]); i++) {
        if (strcmp(str, keywords[i]) == 0)
            return 1;
    }
    return 0;
}

// Function to get the next token from the input file
Token getNextToken(FILE* fp) {
    Token token;
    int c;

    // Skip white spaces and comments
    skipWhiteSpaceAndComments(fp);

    // Read the next character
    c = fgetc(fp);

    // End of file
    if (c == EOF) {
        token.type = EOF;
        return token;
    }

    // Check if the character is an operator
    if (isOperator(c)) {
        token.type = OPERATOR;
        token.value[0] = c;
        token.value[1] = '\0';
        return token;
    }

    // Check if the character is alphanumeric (start of identifier or constant)
    if (isalpha(c) || isdigit(c)) {
        // Read the identifier or constant
        int i = 0;
        while (isalnum(c) || c == '_') {
            token.value[i++] = c;
            c = fgetc(fp);
        }
        token.value[i] = '\0';

        // Check if it's a keyword
        if (isKeyword(token.value)) {
            token.type = IDENTIFIER;
        } else {
            token.type = CONSTANT;
        }

        // Put back the non-alphanumeric character to the input stream
        ungetc(c, fp);

        return token;
    }

    // Unknown token
    printf("Unknown token: %c\n", c);
    exit(1);
}

// Function to skip white spaces and comments
void skipWhiteSpaceAndComments(FILE* fp) {
    int c;

    while ((c = fgetc(fp)) != EOF) {
        if (isspace(c)) {
            continue; // Skip white spaces
        } else if (c == '/') {
            int nextChar = fgetc(fp);
            if (nextChar == '/') {
                // Single-line comment, skip until the end of the line
                while ((c = fgetc(fp)) != '\n' && c != EOF) {
                    continue;
                }
            } else if (nextChar == '*') {
                // Multi-line comment, skip until '*/'
                int prevChar = ' ';
                while ((c = fgetc(fp)) != EOF) {
                    if (prevChar == '*' && c == '/') {
                        break;
                    }
                    prevChar = c;
                }
            } else {
                // Not a comment, put back the character
                ungetc(nextChar, fp);
                return;
            }
        } else {
            // Not a white space or comment, put back the character
            ungetc(c, fp);
            return;
        }
    }
}
